What happens when you initialize a repository? Why do you need to do it?

 - It creates a hidden directory called .git, which contains all the meta data necessary for your repository. You are essentially creating the shell of your repository so you can start adding commits.

 How is the staging area different from the working directory and the repository? What value do you think it offers?

  - The staging area is almost a preview mode or go-between for the working directory and the repository. You add files from the working directory into the staging area, then you have the ability to check the status of the file(s) before adding to the repository. A possible value for this could be the ability to double check before committing, as it were. It could act as a fail-safe.

  How can you use the staging area to make sure you have one commit per logical change?

   - Once you have the file(s) in your working directory, you can run git diff --staged to see the difference(s) between what you have previously committed and what you are about to commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

 - If you are looking to experiment with completely different versions (maybe something that wouldn't necessarily follow logically from the last version), it might be a good idea to start a new branch. It's almost like splitting it up into new files in a directory. That way you can continue working on different branches/versions simultaneously, and be able to check out your latest versions of each, as well as the history of each.