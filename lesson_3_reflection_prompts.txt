When would you want to use a local repository, rather than keeping all your work local?

 - One reason would be to give yourself the ability to do your work from any computer. Another reason would be to have multiple people working on the same project, from different locations. In both cases, all versions of all the files would be available to anyone, anywhere.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

 - If you have multiple people working on one project, the changes they've made may interact with the changes you've made in an unhelpful way. It is more helpful to see the changes made first, then decide if they work with what you have, or if you need to consult with the person who made the changes.

Describe the differences between forks, clones, and branches. When would you use one instead of the other?

 - A clone is copying a repository to your own computer, while a fork is cloning a repository within GitHub. A branch is something different. A branch is a way to take your project in a different direction, while still keeping the progress of the other version(s).

What is the benefit of having a copy of the last known state of the remote stored locally?

 - It is a way to keep up with collaborators as much as possible while working offline.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

 - To collaborate without using Git or GitHub, you would have to manually save individual copies of your work as you went, saving them all as different files. You would then have to send the files you wanted to collaborate on. When you wanted to compare work, you would have to look through each file individually on a line-by-line basis. It's hard to imagine what would be easier with this process. I suppose if you were collaborating on the same computer, it would save some time to not have to keep pushing changes onto GitHub. There are lots of ways it would be harder. You would have a less organized view of your versions, and it would be more time consuming to save each version. It would also be very time-consuming to go through differences line-by-line, especially if you didn't have your collaborator to show you where the changes are. Git diff does this quickly and efficiently.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

 - You would make changes in a separate branch if you wanted to have an experimental or alternate version of your project. Also, if you are collaborating, it's helpful to make changes on a separate branch so when you push to your repo, you are not updating the master branch, possibly making changes that interfere with your collaborator. While making changes directly to your master is simpler, it is safer to make changes on a new branch first, then merge later, when you are sure this is something that you want as a part of your project.